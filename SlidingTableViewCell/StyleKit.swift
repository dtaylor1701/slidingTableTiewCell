//
//  StyleKit.swift
//  SlidingTableViewCell
//
//  Created by David Taylor on 6/16/18.
//  Copyright Â© 2018 Hyper Elephant. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfMoreButton: UIImage?
        static var moreButtonTargets: [AnyObject]?
        static var imageOfCheckButton: UIImage?
        static var checkButtonTargets: [AnyObject]?
        static var imageOfExButton: UIImage?
        static var exButtonTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawMoreButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let color = UIColor(red: 0.894, green: 0.894, blue: 0.894, alpha: 1.000)
        let color2 = UIColor(red: 0.500, green: 0.500, blue: 0.500, alpha: 0.851)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 40, height: 40))
        color2.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 6, y: 16, width: 8, height: 8))
        color.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 16, y: 16, width: 8, height: 8))
        color.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 26, y: 16, width: 8, height: 8))
        color.setFill()
        oval4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCheckButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let color = UIColor(red: 0.894, green: 0.894, blue: 0.894, alpha: 1.000)
        let color2 = UIColor(red: 0.500, green: 0.500, blue: 0.500, alpha: 0.851)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 40, height: 40))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 20.59, y: 16.35)
        context.rotate(by: 30 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.71, y: -11.2))
        bezierPath.addCurve(to: CGPoint(x: 6.71, y: 13), controlPoint1: CGPoint(x: 6.71, y: -11.21), controlPoint2: CGPoint(x: 6.71, y: 13))
        bezierPath.addLine(to: CGPoint(x: -8.18, y: 13))
        bezierPath.addLine(to: CGPoint(x: -8.18, y: 11.28))
        bezierPath.addLine(to: CGPoint(x: 4.89, y: 11.28))
        bezierPath.addCurve(to: CGPoint(x: 4.89, y: -11.21), controlPoint1: CGPoint(x: 4.89, y: 5.76), controlPoint2: CGPoint(x: 4.89, y: -11.21))
        bezierPath.addLine(to: CGPoint(x: 6.71, y: -11.21))
        bezierPath.addLine(to: CGPoint(x: 6.71, y: -11.2))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let color = UIColor(red: 0.894, green: 0.894, blue: 0.894, alpha: 1.000)
        let color2 = UIColor(red: 0.500, green: 0.500, blue: 0.500, alpha: 0.851)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 40, height: 40))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 12.42, y: 10.62))
        bezierPath.addCurve(to: CGPoint(x: 20.19, y: 18.39), controlPoint1: CGPoint(x: 12.41, y: 10.62), controlPoint2: CGPoint(x: 16.2, y: 14.4))
        bezierPath.addCurve(to: CGPoint(x: 27.44, y: 11.14), controlPoint1: CGPoint(x: 23.29, y: 15.29), controlPoint2: CGPoint(x: 26.27, y: 12.32))
        bezierPath.addCurve(to: CGPoint(x: 27.97, y: 10.62), controlPoint1: CGPoint(x: 27.78, y: 10.8), controlPoint2: CGPoint(x: 27.97, y: 10.62))
        bezierPath.addLine(to: CGPoint(x: 29.38, y: 12.03))
        bezierPath.addCurve(to: CGPoint(x: 21.61, y: 19.81), controlPoint1: CGPoint(x: 29.38, y: 12.03), controlPoint2: CGPoint(x: 25.6, y: 15.81))
        bezierPath.addCurve(to: CGPoint(x: 29.38, y: 27.59), controlPoint1: CGPoint(x: 25.6, y: 23.8), controlPoint2: CGPoint(x: 29.38, y: 27.59))
        bezierPath.addLine(to: CGPoint(x: 27.97, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 20.19, y: 21.22), controlPoint1: CGPoint(x: 27.97, y: 29), controlPoint2: CGPoint(x: 24.19, y: 25.22))
        bezierPath.addCurve(to: CGPoint(x: 12.41, y: 29), controlPoint1: CGPoint(x: 16.2, y: 25.22), controlPoint2: CGPoint(x: 12.41, y: 29))
        bezierPath.addLine(to: CGPoint(x: 11, y: 27.59))
        bezierPath.addCurve(to: CGPoint(x: 18.78, y: 19.81), controlPoint1: CGPoint(x: 11, y: 27.59), controlPoint2: CGPoint(x: 14.78, y: 23.8))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 12.03), controlPoint1: CGPoint(x: 14.78, y: 15.81), controlPoint2: CGPoint(x: 11, y: 12.03))
        bezierPath.addLine(to: CGPoint(x: 12.41, y: 10.62))
        bezierPath.addLine(to: CGPoint(x: 12.42, y: 10.62))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfMoreButton: UIImage {
        if Cache.imageOfMoreButton != nil {
            return Cache.imageOfMoreButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawMoreButton()

        Cache.imageOfMoreButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMoreButton!
    }

    @objc dynamic public class var imageOfCheckButton: UIImage {
        if Cache.imageOfCheckButton != nil {
            return Cache.imageOfCheckButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawCheckButton()

        Cache.imageOfCheckButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCheckButton!
    }

    @objc dynamic public class var imageOfExButton: UIImage {
        if Cache.imageOfExButton != nil {
            return Cache.imageOfExButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            StyleKit.drawExButton()

        Cache.imageOfExButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfExButton!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var moreButtonTargets: [AnyObject]! {
        get { return Cache.moreButtonTargets }
        set {
            Cache.moreButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfMoreButton)
            }
        }
    }

    @objc @IBOutlet dynamic var checkButtonTargets: [AnyObject]! {
        get { return Cache.checkButtonTargets }
        set {
            Cache.checkButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfCheckButton)
            }
        }
    }

    @objc @IBOutlet dynamic var exButtonTargets: [AnyObject]! {
        get { return Cache.exButtonTargets }
        set {
            Cache.exButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfExButton)
            }
        }
    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
